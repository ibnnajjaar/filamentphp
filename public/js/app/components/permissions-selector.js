// resources/js/components/permissions-selector.js
function permissionsSelector({
  state,
  modelPermissions,
  selectedModelPermissions
}) {
  return {
    state,
    modelPermissions,
    selectedModelPermissions,
    searchByModels: "",
    searchByPermissions: "",
    displayedModels: [],
    displayedModelPermissions: [],
    init: function() {
      this.state = this.selectedModelPermissions ?? [];
      this.displayedModels = this.modelPermissions;
    },
    searchModels() {
      this.displayedModels = this.modelPermissions.filter((modelPermission) => {
        return modelPermission.model.toLowerCase().includes(this.searchByModels.toLowerCase());
      });
      this.displayedModelPermissions = this.displayedModels;
    },
    searchPermissions() {
      if (this.displayedModelPermissions.length === 0) {
        this.displayedModelPermissions = this.modelPermissions;
      }
      this.displayedModels = this.displayedModelPermissions.map((modelPermission) => {
        return {
          model: modelPermission.model,
          permissions: modelPermission.permissions.filter((permission) => {
            return permission.name.toLowerCase().includes(this.searchByPermissions.toLowerCase());
          })
        };
      });
    },
    updatePermission(permissionId) {
      const index = this.selectedModelPermissions.indexOf(permissionId);
      if (index === -1) {
        this.selectedModelPermissions.push(permissionId);
      } else {
        this.selectedModelPermissions.splice(index, 1);
      }
    },
    isChecked(permissionId) {
      return this.selectedModelPermissions.includes(permissionId);
    },
    isSearchingByModels() {
      return this.searchByModels.length > 0;
    },
    clearSearchByModels() {
      this.searchByModels = "";
      this.searchModels();
    },
    clearSearchByPermissions() {
      this.searchByPermissions = "";
      this.searchPermissions();
    },
    allPermissionsAreSelected() {
      let permissionsCount = 0;
      this.modelPermissions.forEach((modelPermission) => {
        permissionsCount += modelPermission.permissions.length;
      });
      return this.selectedModelPermissions.length === permissionsCount;
    },
    selectAllPermissions() {
      let permissions = [];
      if (this.displayedModelPermissions.length === 0) {
        this.displayedModelPermissions = this.modelPermissions;
      }
      this.displayedModelPermissions.forEach((modelPermission) => {
        modelPermission.permissions.forEach((permission) => {
          permissions.push(permission.id);
        });
      });
      this.selectedModelPermissions = permissions;
    },
    deselectAllPermissions() {
      let permissions = [];
      this.displayedModelPermissions.forEach((modelPermission) => {
        modelPermission.permissions.forEach((permission) => {
          permissions.push(permission.id);
        });
      });
      this.selectedModelPermissions = this.selectedModelPermissions.filter((permission) => {
        return !permissions.includes(permission);
      });
    }
  };
}
export {
  permissionsSelector as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vY29tcG9uZW50cy9wZXJtaXNzaW9ucy1zZWxlY3Rvci5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGVybWlzc2lvbnNTZWxlY3Rvcih7XG4gIHN0YXRlLFxuICBtb2RlbFBlcm1pc3Npb25zLFxuICBzZWxlY3RlZE1vZGVsUGVybWlzc2lvbnMsXG59KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIG1vZGVsUGVybWlzc2lvbnMsXG4gICAgICAgIHNlbGVjdGVkTW9kZWxQZXJtaXNzaW9ucyxcbiAgICAgICAgc2VhcmNoQnlNb2RlbHM6ICcnLFxuICAgICAgICBzZWFyY2hCeVBlcm1pc3Npb25zOiAnJyxcbiAgICAgICAgZGlzcGxheWVkTW9kZWxzOiBbXSxcbiAgICAgICAgZGlzcGxheWVkTW9kZWxQZXJtaXNzaW9uczogW10sXG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gc2V0IHRoZSBzdGF0ZSB0byBlbXB0eSBhcnJheVxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuc2VsZWN0ZWRNb2RlbFBlcm1pc3Npb25zID8/IFtdO1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRNb2RlbHMgPSB0aGlzLm1vZGVsUGVybWlzc2lvbnM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VhcmNoTW9kZWxzKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRNb2RlbHMgPSB0aGlzLm1vZGVsUGVybWlzc2lvbnMuZmlsdGVyKG1vZGVsUGVybWlzc2lvbiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsUGVybWlzc2lvbi5tb2RlbC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc2VhcmNoQnlNb2RlbHMudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRNb2RlbFBlcm1pc3Npb25zID0gdGhpcy5kaXNwbGF5ZWRNb2RlbHM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VhcmNoUGVybWlzc2lvbnMoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaXNwbGF5ZWRNb2RlbFBlcm1pc3Npb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkTW9kZWxQZXJtaXNzaW9ucyA9IHRoaXMubW9kZWxQZXJtaXNzaW9ucztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRNb2RlbHMgPSB0aGlzLmRpc3BsYXllZE1vZGVsUGVybWlzc2lvbnMubWFwKG1vZGVsUGVybWlzc2lvbiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsUGVybWlzc2lvbi5tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbnM6IG1vZGVsUGVybWlzc2lvbi5wZXJtaXNzaW9ucy5maWx0ZXIocGVybWlzc2lvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVybWlzc2lvbi5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5zZWFyY2hCeVBlcm1pc3Npb25zLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlUGVybWlzc2lvbihwZXJtaXNzaW9uSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zZWxlY3RlZE1vZGVsUGVybWlzc2lvbnMuaW5kZXhPZihwZXJtaXNzaW9uSWQpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcGVybWlzc2lvbiBpcyBub3QgaW4gdGhlIHN0YXRlLCBhZGQgaXRcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTW9kZWxQZXJtaXNzaW9ucy5wdXNoKHBlcm1pc3Npb25JZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwZXJtaXNzaW9uIGlzIGluIHRoZSBzdGF0ZSwgcmVtb3ZlIGl0XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1vZGVsUGVybWlzc2lvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpc0NoZWNrZWQocGVybWlzc2lvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZE1vZGVsUGVybWlzc2lvbnMuaW5jbHVkZXMocGVybWlzc2lvbklkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1NlYXJjaGluZ0J5TW9kZWxzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoQnlNb2RlbHMubGVuZ3RoID4gMDtcbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhclNlYXJjaEJ5TW9kZWxzKCkge1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hCeU1vZGVscyA9ICcnO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hNb2RlbHMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhclNlYXJjaEJ5UGVybWlzc2lvbnMoKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaEJ5UGVybWlzc2lvbnMgPSAnJztcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoUGVybWlzc2lvbnMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbGxQZXJtaXNzaW9uc0FyZVNlbGVjdGVkKCkge1xuICAgICAgICAgICAgLy8gQ291bnQgdGhlIHBlcm1pc3Npb25zIGluIG1vZGVsUGVybWlzc2lvbnNcbiAgICAgICAgICAgIGxldCBwZXJtaXNzaW9uc0NvdW50ID0gMDtcbiAgICAgICAgICAgIHRoaXMubW9kZWxQZXJtaXNzaW9ucy5mb3JFYWNoKChtb2RlbFBlcm1pc3Npb24pID0+IHtcbiAgICAgICAgICAgICAgICBwZXJtaXNzaW9uc0NvdW50ICs9IG1vZGVsUGVybWlzc2lvbi5wZXJtaXNzaW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRNb2RlbFBlcm1pc3Npb25zLmxlbmd0aCA9PT0gcGVybWlzc2lvbnNDb3VudDtcbiAgICAgICAgfSxcblxuICAgICAgICBzZWxlY3RBbGxQZXJtaXNzaW9ucygpIHtcbiAgICAgICAgICAgIGxldCBwZXJtaXNzaW9ucyA9IFtdO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGxheWVkTW9kZWxQZXJtaXNzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZE1vZGVsUGVybWlzc2lvbnMgPSB0aGlzLm1vZGVsUGVybWlzc2lvbnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkTW9kZWxQZXJtaXNzaW9ucy5mb3JFYWNoKChtb2RlbFBlcm1pc3Npb24pID0+IHtcbiAgICAgICAgICAgICAgICBtb2RlbFBlcm1pc3Npb24ucGVybWlzc2lvbnMuZm9yRWFjaCgocGVybWlzc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucy5wdXNoKHBlcm1pc3Npb24uaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNb2RlbFBlcm1pc3Npb25zID0gcGVybWlzc2lvbnM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVzZWxlY3RBbGxQZXJtaXNzaW9ucygpIHtcbiAgICAgICAgICAgIGxldCBwZXJtaXNzaW9ucyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRNb2RlbFBlcm1pc3Npb25zLmZvckVhY2goKG1vZGVsUGVybWlzc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgIG1vZGVsUGVybWlzc2lvbi5wZXJtaXNzaW9ucy5mb3JFYWNoKChwZXJtaXNzaW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zLnB1c2gocGVybWlzc2lvbi5pZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIHBlcm1pc3Npb25zIGZyb20gc2VsZWN0ZWRNb2RlbFBlcm1pc3Npb25zXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkTW9kZWxQZXJtaXNzaW9ucyA9IHRoaXMuc2VsZWN0ZWRNb2RlbFBlcm1pc3Npb25zLmZpbHRlcihwZXJtaXNzaW9uID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXBlcm1pc3Npb25zLmluY2x1ZGVzKHBlcm1pc3Npb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixvQkFBcUM7QUFBQSxFQUMxQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0YsR0FBRztBQUNDLFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBLGdCQUFnQjtBQUFBLElBQ2hCLHFCQUFxQjtBQUFBLElBQ3JCLGlCQUFpQixDQUFDO0FBQUEsSUFDbEIsMkJBQTJCLENBQUM7QUFBQSxJQUU1QixNQUFNLFdBQVk7QUFFZCxXQUFLLFFBQVEsS0FBSyw0QkFBNEIsQ0FBQztBQUMvQyxXQUFLLGtCQUFrQixLQUFLO0FBQUEsSUFDaEM7QUFBQSxJQUVBLGVBQWU7QUFDWCxXQUFLLGtCQUFrQixLQUFLLGlCQUFpQixPQUFPLHFCQUFtQjtBQUNuRSxlQUFPLGdCQUFnQixNQUFNLFlBQVksRUFBRSxTQUFTLEtBQUssZUFBZSxZQUFZLENBQUM7QUFBQSxNQUN6RixDQUFDO0FBRUQsV0FBSyw0QkFBNEIsS0FBSztBQUFBLElBQzFDO0FBQUEsSUFFQSxvQkFBb0I7QUFDaEIsVUFBSSxLQUFLLDBCQUEwQixXQUFXLEdBQUc7QUFDN0MsYUFBSyw0QkFBNEIsS0FBSztBQUFBLE1BQzFDO0FBRUEsV0FBSyxrQkFBa0IsS0FBSywwQkFBMEIsSUFBSSxxQkFBbUI7QUFDekUsZUFBTztBQUFBLFVBQ0gsT0FBTyxnQkFBZ0I7QUFBQSxVQUN2QixhQUFhLGdCQUFnQixZQUFZLE9BQU8sZ0JBQWM7QUFDMUQsbUJBQU8sV0FBVyxLQUFLLFlBQVksRUFBRSxTQUFTLEtBQUssb0JBQW9CLFlBQVksQ0FBQztBQUFBLFVBQ3hGLENBQUM7QUFBQSxRQUNMO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsaUJBQWlCLGNBQWM7QUFDM0IsWUFBTSxRQUFRLEtBQUsseUJBQXlCLFFBQVEsWUFBWTtBQUdoRSxVQUFJLFVBQVUsSUFBSTtBQUNkLGFBQUsseUJBQXlCLEtBQUssWUFBWTtBQUFBLE1BQ25ELE9BQU87QUFFSCxhQUFLLHlCQUF5QixPQUFPLE9BQU8sQ0FBQztBQUFBLE1BQ2pEO0FBQUEsSUFDSjtBQUFBLElBRUEsVUFBVSxjQUFjO0FBQ3BCLGFBQU8sS0FBSyx5QkFBeUIsU0FBUyxZQUFZO0FBQUEsSUFDOUQ7QUFBQSxJQUVBLHNCQUFzQjtBQUNsQixhQUFPLEtBQUssZUFBZSxTQUFTO0FBQUEsSUFDeEM7QUFBQSxJQUVBLHNCQUFzQjtBQUNsQixXQUFLLGlCQUFpQjtBQUN0QixXQUFLLGFBQWE7QUFBQSxJQUN0QjtBQUFBLElBRUEsMkJBQTJCO0FBQ3ZCLFdBQUssc0JBQXNCO0FBQzNCLFdBQUssa0JBQWtCO0FBQUEsSUFDM0I7QUFBQSxJQUVBLDRCQUE0QjtBQUV4QixVQUFJLG1CQUFtQjtBQUN2QixXQUFLLGlCQUFpQixRQUFRLENBQUMsb0JBQW9CO0FBQy9DLDRCQUFvQixnQkFBZ0IsWUFBWTtBQUFBLE1BQ3BELENBQUM7QUFFRCxhQUFPLEtBQUsseUJBQXlCLFdBQVc7QUFBQSxJQUNwRDtBQUFBLElBRUEsdUJBQXVCO0FBQ25CLFVBQUksY0FBYyxDQUFDO0FBQ25CLFVBQUksS0FBSywwQkFBMEIsV0FBVyxHQUFHO0FBQzdDLGFBQUssNEJBQTRCLEtBQUs7QUFBQSxNQUMxQztBQUVBLFdBQUssMEJBQTBCLFFBQVEsQ0FBQyxvQkFBb0I7QUFDeEQsd0JBQWdCLFlBQVksUUFBUSxDQUFDLGVBQWU7QUFDaEQsc0JBQVksS0FBSyxXQUFXLEVBQUU7QUFBQSxRQUNsQyxDQUFDO0FBQUEsTUFDTCxDQUFDO0FBRUQsV0FBSywyQkFBMkI7QUFBQSxJQUNwQztBQUFBLElBRUEseUJBQXlCO0FBQ3JCLFVBQUksY0FBYyxDQUFDO0FBQ25CLFdBQUssMEJBQTBCLFFBQVEsQ0FBQyxvQkFBb0I7QUFDeEQsd0JBQWdCLFlBQVksUUFBUSxDQUFDLGVBQWU7QUFDaEQsc0JBQVksS0FBSyxXQUFXLEVBQUU7QUFBQSxRQUNsQyxDQUFDO0FBQUEsTUFDTCxDQUFDO0FBR0QsV0FBSywyQkFBMkIsS0FBSyx5QkFBeUIsT0FBTyxnQkFBYztBQUMvRSxlQUFPLENBQUMsWUFBWSxTQUFTLFVBQVU7QUFBQSxNQUMzQyxDQUFDO0FBQUEsSUFDTDtBQUFBLEVBRUo7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
